worker_processes  4; # 80$ droplet, so 4 core enabled

events {
    worker_connections  8096; # accepted incoming connections*2
    multi_accept on; # accept each connection as soon as you can
    accept_mutex off;
    use epoll;
}

http {
    include       mime.types;
    default_type  application/octet-stream;

    server_tokens off; # dont send unnecessary server info (like version)

    add_header X-XSS-Protection "1; mode=block"; # prevent XSS

    client_body_buffer_size 10K; # raise the threshold by which requests are written to HDD instead of RAM
    client_header_buffer_size 2k;
    client_max_body_size 8m; # we dont accept requests larger that 8mb, probably you are DoSing us

    sendfile          on;
    tcp_nopush        on;
    tcp_nodelay       on;

    keepalive_timeout 5;

    gzip on; # enable zipping files
    gzip_vary on;
    # gzip_min_length 5120; # enable it only for medium-big files (slowbro size is 7000)
    gzip_proxied expired no-cache no-store private auth;
    gzip_types text/plain text/css text/xml text/javascript application/x-javascript application/xml application/json;
    gzip_disable "msi6";

    upstream pokeapi_upstream {
        # 'app' is the Django container name in Docker
        # DO NOT EDIT IT ALONE or it'll break docker-compose
        server app:8000 fail_timeout=0;
    }

    limit_req_zone $binary_remote_addr zone=api:10m rate=2r/s;

    server {
        listen 80 default_server;

        location /.well-known/acme-challenge/ {
            root /var/www/certbot;
        }

        # redirect http requests to https
        location / {
            return 301 https://$host$request_uri;
        }
    }

    server {
        listen 443 ssl;
        server_name ~^(.+)$;

        ssl_certificate /etc/letsencrypt/live/pokeapi.charlesmarttinen.ca/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/pokeapi.charlesmarttinen.ca/privkey.pem;
        include /etc/letsencrypt/options-ssl-nginx.conf;
        ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;

        # listen 80 deferred;
        # server_name _;

        client_body_timeout 5s;
        client_header_timeout 5s;

        root /code;

        rewrite ^/api/v1/(.*)$ /api/v2/$1 redirect; # redirect all v1 API requests to v2

        location /media/ {
            root /code;
            autoindex off;
        }

        # cache these extensions for 5 days and disable logging
        location ~* \.(jpg|jpeg|gif|png|css|js|ico|xml)$ {
            access_log        off;
            log_not_found     off;
            expires           5d;
            add_header Cache-Control "public";
            add_header Pragma public;
        }

        location /api/v2/ {
            expires 1440m; # client-side caching, one day for each API resource
            add_header Cache-Control "public";
            add_header Pragma public;

            # allow CORS requests
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Methods' 'GET, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'Authorization, Origin, X-Requested-With, Content-Type, Accept';

            limit_req zone=api burst=10;

            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header Host $http_host;

            proxy_redirect off;

            proxy_pass http://pokeapi_upstream;
        }

        location / {
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header Host $http_host;

            proxy_redirect off;

            proxy_pass http://pokeapi_upstream;
        }
    }
}
